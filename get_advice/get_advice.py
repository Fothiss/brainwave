import os
from qdrant_client import QdrantClient
from langchain_gigachat.chat_models.gigachat import GigaChat
from langchain_gigachat.embeddings import GigaChatEmbeddings
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
QDRANT_HOST = "95.215.56.225"
QDRANT_PORT = 6333
COLLECTION_NAME = "legal_rules_chunks"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
qdrant_client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ GigaChat
model = GigaChat(
    model="GigaChat-2",
    temperature=0.1,
    max_tokens=1000,
    credentials=os.getenv("GIGACHAT_CREDENTIALS"),
    verify_ssl_certs=False
)

def search_relevant_chunks(query: str, section_number: str = None, limit: int = 5):
    """
    –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        section_number: –ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    Returns:
        List[dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    search_query = query
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    if section_number:
        search_query = f"{section_number} {query}"
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞    
    embeddings = GigaChatEmbeddings(
        model="EmbeddingsGigaR",
        credentials=os.getenv("GIGACHAT_CREDENTIALS"),
        verify_ssl_certs=False
    )
    query_embedding = embeddings.embed_query(search_query)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Qdrant
    search_results = qdrant_client.query_points(
        collection_name=COLLECTION_NAME,
        query=query_embedding,
        limit=limit
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    relevant_chunks = []
    for result in search_results.points:
        relevant_chunks.append({
            "text": result.payload.get("text", ""),
            "score": result.score
        })
    
    return relevant_chunks

def create_prompt(operation: str, participant_type: str, section_number: str, relevant_chunks: list) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        participant_type: –¢–∏–ø –ª–∏—Ü–∞
        section_number: –ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞
        relevant_chunks: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    
    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    context = "\n\n".join([f"–ö–æ–Ω—Ç–µ–∫—Å—Ç {i+1} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {chunk['score']:.3f}):\n{chunk['text']}" 
                          for i, chunk in enumerate(relevant_chunks)])
    
    prompt = f"""
        –¢—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö.
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ü–†–û–°–ï:
        - –û–ø–µ—Ä–∞—Ü–∏—è: {operation}
        - –¢–∏–ø –ª–∏—Ü–∞: {participant_type}
        - –†–∞–∑–¥–µ–ª –ø—Ä–∞–≤–∏–ª: {section_number}

        –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
        {context}

        –ò–ù–°–¢–†–£–ö–¶–ò–ò:
        1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á–µ—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        3. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –≤—ã–¥–µ–ª–∏ –∏—Ö
        4. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —É–∫–∞–∂–∏ –∏—Ö
        5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —É–∫–∞–∂–∏ —ç—Ç–æ
        6. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        –û–¢–í–ï–¢ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):
        """
    return prompt

def get_llm_response(prompt: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM GigaChat
    
    Args:
        prompt: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    """
    try:
        response = model.invoke(prompt)
        return response.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {str(e)}"

def get_legal_advice(operation: str, participant_type: str, section_number: str) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    
    Args:
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞")
        participant_type: –¢–∏–ø –ª–∏—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
        section_number: –ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∞–≤–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5.1")
    
    Returns:
        str: –ü–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    print(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ–ø–µ—Ä–∞—Ü–∏—è='{operation}', –ª–∏—Ü–æ='{participant_type}', —Ä–∞–∑–¥–µ–ª='{section_number}'")
    
    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    search_query = f"{operation} {participant_type}"
    
    # 2. –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
    relevant_chunks = search_relevant_chunks(
        query=search_query,
        section_number=section_number,
        limit=5
    )
    
    if not relevant_chunks:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –ø—Ä–∞–≤–∏–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞."
    
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(relevant_chunks)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
    
    # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = create_prompt(operation, participant_type, section_number, relevant_chunks)
    
    # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
    response = get_llm_response(prompt)
    
    return response

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    result = get_legal_advice(
        operation="–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞",
        participant_type="–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", 
        section_number="5.1"
    )
    
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*50)
    print(result)