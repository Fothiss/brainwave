import os
import re
import uuid
import requests
from dotenv import load_dotenv
from qdrant_client import QdrantClient, models
from docx import Document

# ==========================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==========================
load_dotenv()

AUTH_KEY = os.getenv("AUTH_KEY")   # –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ .env
QDRANT_HOST = "95.215.56.225"
QDRANT_PORT = 6333
DOC_PATH = "–ü—Ä–∞–≤–∏–ª–∞.docx"               # ‚ö†Ô∏è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π .doc ‚Üí .docx –∑–∞—Ä–∞–Ω–µ–µ
COLLECTION_NAME = "legal_rules_chunks"

def get_access_token(auth_key: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π access_token —á–µ—Ä–µ–∑ /api/v2/oauth"""
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": str(uuid.uuid4()),
        "Authorization": f"Basic {auth_key}",
    }
    data = {"scope": "GIGACHAT_API_PERS"}
    response = requests.post(url, headers=headers, data=data, verify=False)
    response.raise_for_status()
    token = response.json()["access_token"]
    print("üîë Access token –ø–æ–ª—É—á–µ–Ω.")
    return token


# ==========================
# üîπ 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ .docx
# ==========================
def extract_text_from_docx(path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word"""
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])


# ==========================
# üîπ 3. –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º
# ==========================
def split_by_sections(text: str):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä–∞–º –ø—É–Ω–∫—Ç–æ–≤ (1.1., 5.11.3. –∏ —Ç.–¥.)"""
    pattern = re.compile(r"(?=\n?\d+(\.\d+)+\.)")
    chunks = [c.strip() for c in pattern.split(text) if len(c.strip()) > 50]
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤.")
    return chunks


# ==========================
# üîπ 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ GigaChat
# ==========================
def get_embeddings(texts, access_token, batch_size=10):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç—ã –≤ GigaChat –ø–æ—Ä—Ü–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 413"""
    url = "https://gigachat.devices.sberbank.ru/api/v1/embeddings"
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {access_token}"
    }

    all_embeddings = []
    for i in range(0, len(texts), batch_size):
        batch = texts[i:i + batch_size]
        payload = {
            "model": "EmbeddingsGigaR",
            "input": batch
        }

        response = requests.post(url, headers=headers, json=payload, verify=False)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {i // batch_size + 1}: {response.text}")
            response.raise_for_status()
        data = response.json().get("data", [])
        embeddings = [item["embedding"] for item in data]
        all_embeddings.extend(embeddings)
        print(f"üß† –ü–æ–ª—É—á–µ–Ω–æ {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (batch {i // batch_size + 1})")

    return all_embeddings



# ==========================
# üîπ 5. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Qdrant
# ==========================
def upload_to_qdrant(chunks, embeddings):
    """–°–æ–∑–¥–∞—ë—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫–∏"""
    client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

    # —Å–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
    existing = [c.name for c in client.get_collections().collections]
    if COLLECTION_NAME not in existing:
        dim = len(embeddings[0])
        client.create_collection(
            collection_name=COLLECTION_NAME,
            vectors_config=models.VectorParams(size=dim, distance=models.Distance.COSINE)
        )
        print(f"üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{COLLECTION_NAME}' —Å–æ–∑–¥–∞–Ω–∞ ({dim} dim).")

    points = [
        models.PointStruct(
            id=str(uuid.uuid4()),
            vector=emb,
            payload={"text": chunk}
        )
        for chunk, emb in zip(chunks, embeddings)
    ]

    client.upsert(collection_name=COLLECTION_NAME, points=points)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(points)} —á–∞–Ω–∫–æ–≤ –≤ Qdrant.")


# ==========================
# üîπ 6. –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
# ==========================
def process_doc_to_qdrant():
    print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    token = get_access_token(AUTH_KEY)
    text = extract_text_from_docx(DOC_PATH)
    chunks = split_by_sections(text)
    embeddings = get_embeddings(chunks, token)
    upload_to_qdrant(chunks, embeddings)
    print("üéØ –ì–æ—Ç–æ–≤–æ!")


# ==========================
# üîπ –ó–∞–ø—É—Å–∫
# ==========================
if __name__ == "__main__":
    process_doc_to_qdrant()
